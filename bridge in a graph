##  bridge in a graph 
#include <bits/stdc++.h> // includes all standard headers
using namespace std;

void dfs(int node, int parent, int &timer,
         vector<int> &disc, vector<int> &low,
         vector<vector<int>> &result,
         unordered_map<int, list<int>> &adj,
         unordered_map<int, bool> &visited)
{
    visited[node] = true;
    disc[node] = low[node] = timer++;

    for (auto neighbour : adj[node])
    {
        if (neighbour == parent)
            continue;

        if (!visited[neighbour])
        {
            dfs(neighbour, node, timer, disc, low, result, adj, visited);

            low[node] = min(low[node], low[neighbour]);

            // check if the edge is a bridge
            if (low[neighbour] > disc[node])
            {
                vector<int> ans;
                ans.push_back(node);
                ans.push_back(neighbour);
                result.push_back(ans);
            }
        }
        else
        {
            // back edge
            low[node] = min(low[node], disc[neighbour]);
        }
    }
}

vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e)
{
    unordered_map<int, list<int>> adj;

    // build adjacency list
    for (int i = 0; i < e; i++)
    {
        int u = edges[i][0];
        int w = edges[i][1];
        adj[u].push_back(w);
        adj[w].push_back(u);
    }

    int timer = 0;
    vector<int> disc(v, -1);
    vector<int> low(v, -1);
    unordered_map<int, bool> visited;
    vector<vector<int>> result;

    for (int i = 0; i < v; i++)
    {
        if (!visited[i])
        {
            dfs(i, -1, timer, disc, low, result, adj, visited);
        }
    }

    return result;
}
